use QATSQLPLUS
--EX1 Task 1 - Inner Join


SELECT V.VendorName, C.CourseName, C.CourseID
FROM dbo.Vendor AS V
INNER JOIN dbo.Course AS C
ON V.VendorID = C.VendorID



-- Ex1 Task 2 - View


CREATE VIEW dbo.CourseList AS
SELECT V.VendorName, C.CourseName, C.CourseID
FROM dbo.Vendor AS V
INNER JOIN dbo.Course AS C
ON V.VendorID = C.VendorID

GO
SELECT * FROM dbo.CourseList

-- GO is used to seperate batches of code for example after CREATE VEIW or CREATE PROCEDURE 
-- and is required for some syntax.
-- GO can be used with a number to indicate how often a statement is to be executed (1000)




-- EX 2 Task 1 INNER JOIN

SELECT D.DelegateID,
SUM(CR.DurationDays) AS DelegateDays,
COUNT(*) AS DelegateCourses
FROM dbo.Delegate AS D
INNER JOIN dbo.DelegateAttendance AS DA
ON D.DelegateID = DA.DelegateID
INNER JOIN dbo.CourseRun AS CR
ON CR.CourseRunID = DA.CourseRunID
GROUP BY D.DelegateID

select * from Delegate
select * from CourseRun
select * from DelegateAttendance



-- EX 2 Task 2 TABLE VALUE FUNCTION (INLINE)
-- No Parameters are passed to the function but remember to state TABLE as data type.



CREATE FUNCTION udf_DelegateDays()
RETURNS TABLE
AS
RETURN (
SELECT D.DelegateID, SUM(CR.DurationDays) AS DelegateDays,
COUNT(*) AS DelegateCourses
FROM dbo.Delegate AS D
INNER JOIN dbo.DelegateAttendance AS DA
ON D.DelegateID = DA.DelegateID
INNER JOIN dbo.CourseRun AS CR
ON CR.CourseRunID = DA.CourseRunID
GROUP BY D.DelegateID
)
GO
SELECT * FROM dbo.udf_DelegateDays()



-- EX 2 Task 3 TVF with PARAMETER  @DelegateID is passed to the function to allow a single delegate to be shown.

CREATE FUNCTION dbo.udf_IndividualDelegateDays(@DelegateID INT)
RETURNS TABLE
AS
RETURN(
SELECT @DelegateID AS DelegateID,
SUM(CR.DurationDays) AS DelegateDays,
COUNT(*) AS DelegateCourses
FROM dbo.Delegate AS D
INNER JOIN dbo.DelegateAttendance AS DA
ON D.DelegateID = DA.DelegateID
INNER JOIN dbo.CourseRun AS CR
ON CR.CourseRunID = DA.CourseRunID
WHERE D.DelegateID = @DelegateID
)
GO
SELECT * FROM dbo.udf_IndividualDelegateDays(1)



-- Ex3 Task 1 QUERY



SELECT CourseRunID, StartDate
FROM dbo.Trainer AS T
INNER JOIN dbo.CourseRun AS CR
ON T.TrainerID = CR.TrainerID
WHERE TrainerName = 'Jason Bourne'

--EX 3 Task 2 DERIVED TABLE (Not a true Temporary Table)It is not a physical construct like a TT which is saved in TempDB



SELECT D.DelegateID, D.DelegateName, D.CompanyName, JB.StartDate
FROM dbo.Delegate AS D
INNER JOIN dbo.DelegateAttendance AS DA
ON D.DelegateID = DA.DelegateID
INNER JOIN (						-- DERIVED TABLE (basically a SUBQUERY) from previous JB query Start
SELECT CourseRunID, StartDate
FROM dbo.Trainer AS T
INNER JOIN dbo.CourseRun AS CR
ON T.TrainerID = CR.TrainerID
WHERE TrainerName = 'Jason Bourne'
) AS JB								-- DERIVED  TABLE (JB) END
ON DA.CourseRunID = JB.CourseRunID






-- EX 4 Task 2 Query to find all MS courses TEMPORARY TABLE LOCAL and GLOBAl (Uses INTO and #/##)



SELECT * INTO #MicrosoftLocal
FROM dbo.Course WHERE VendorID = 2
SELECT * INTO ##MicrosoftGlobal
FROM dbo.Course WHERE VendorID = 2
GO
SELECT *
FROM #MicrosoftLocal -- Will not be availabe in new query (just LOCAL for this sesssion)

SELECT *
FROM ##MicrosoftGlobal -- Will be available in new session (new query) (but not when this connection is diconnected)



